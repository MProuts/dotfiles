" Make vim color work inside tmux
set term=screen-256color

" Make arrow keys work inside of tmux
if &term =~ '^screen'
    " tmux will send xterm-style keys when its xterm-keys option is on
    execute "set <xUp>=\e[1;*A"
    execute "set <xDown>=\e[1;*B"
    execute "set <xRight>=\e[1;*C"
    execute "set <xLeft>=\e[1;*D"
endif

color tomorrow-night

set background=dark
set clipboard=unnamed
" let NERDTreeShowHidden=1
" let NERTTreeQuitOnOpen=1
" let NERDTreeHijackNetrw=1
" map <C-n> :NERDTreeToggle<CR>

" replace NERDTree with builtin newrw
map <C-n> :E<CR>

" Fix ambiguous :E for :Explore
cabbrev E Explore

" Expand %% to current biffer directory in command line mode
cnoremap <expr> %%  getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" Use 'cp' in normal mode to copy the Current Path into the clipboard
nmap cp :let @* = expand("%")<CR>

" Use 'cfp' in normal mode to copy the Current Full Path into the clipboard
nmap cfp :let @* = expand("%:p")<CR>

map <S-q> :wqa<CR>
map <S-k> :let @/ = ""<CR>

map <S-Left> :bp<CR>
map <S-Right> :bn<CR>
map <leader>o :e 
map <C-n> :CtrlPBuffer<CR>

" something for tmux
" ==================
"
"if &term =~ '^screen' && exists('$TMUX')
"    set mouse+=a
"    " tmux knows the extended mouse mode
"    set ttymouse=xterm2
"    " tmux will send xterm-style keys when xterm-keys is on
"    execute "set <xUp>=\e[1;*A"
"    execute "set <xDown>=\e[1;*B"
"    execute "set <xRight>=\e[1;*C"
"    execute "set <xLeft>=\e[1;*D"
"    execute "set <xHome>=\e[1;*H"
"    execute "set <xEnd>=\e[1;*F"
"    execute "set <Insert>=\e[2;*~"
"    execute "set <Delete>=\e[3;*~"
"    execute "set <PageUp>=\e[5;*~"
"    execute "set <PageDown>=\e[6;*~"
"    execute "set <xF1>=\e[1;*P"
"    execute "set <xF2>=\e[1;*Q"
"    execute "set <xF3>=\e[1;*R"
"    execute "set <xF4>=\e[1;*S"
"    execute "set <F5>=\e[15;*~"
"    execute "set <F6>=\e[17;*~"
"    execute "set <F7>=\e[18;*~"
"    execute "set <F8>=\e[19;*~"
"    execute "set <F9>=\e[20;*~"
"    execute "set <F10>=\e[21;*~"
"    execute "set <F11>=\e[23;*~"
"    execute "set <F12>=\e[24;*~"
"endif

" Invisible Characters
nmap <leader>l :set list!<CR>
set nolist
set listchars=eol:\$

set shortmess+=A

" Suppress “No write since last change” message when traversing changed
" buffers.  (This way, we can make changes to several buffers using argdo.)
set hidden

set wrap

" Make sure files aren't hidden by ctrlp
"
let g:ctrlp_max_files=0
let g:ctrlp_max_depth=40
set wildignore+=*/tmp/*,*/log/*,*/public/logcheck-*,*/public/ckeditor-*
